// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>5/31/2018 5:37:33 PM</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

using Microsoft.Xrm.Sdk.Query;
using System.Security;


namespace Microsoft.Dynamics365.AppSource.PlugIn
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;

    using Microsoft.Dynamics365.AppSource.PlugIn.Logging;

    public class ExecuteLicensePlugin : IPlugin
    {
        
        public void Execute(IServiceProvider serviceProvider)
        {
            // Extract the tracing service for use in debugging sandboxed plug-ins.
            // If you are not registering the plug-in in the sandbox, then you do
            // not have to add any tracing service related code.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                // Obtain the target entity from the input parameters.
                Entity entity = (Entity)context.InputParameters["Target"];
                // Verify that the target entity represents an entity type you are expecting. 
                // For example, an account. If not, the plug-in was not registered correctly.

                // Obtain the organization service reference which you will need for
                // web service calls.
                IOrganizationServiceFactory serviceFactory =
                    (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

                Logger.LogInstance.AssignTrace(tracingService);
                

                try
                {
                    
                    ILicenseInfo licenseInfo = new LicenseInfo(service);
                    tracingService.Trace($"Plug-In fired for entity: {entity.LogicalName}");
                    bool IsValid = false;
                    if (entity.LogicalName == "cxp_appicationlicense")
                    {
                        IsValid = licenseInfo.ValidateLicenseSignature(entity);
                        tracingService.Trace($"ValidateLicenseSignature returns {IsValid}");
                        if (!IsValid)
                            throw new InvalidPluginExecutionException("Your License is not vaild, Please acquire a new license from Contoso Inc. to proceed further");
                    }
                    else
                    {
                        IsValid = licenseInfo.ValidateLicenseExpiry();
                        tracingService.Trace($"ValidateLicenseExpiry returns {IsValid}");
                        if(IsValid)
                            throw new InvalidPluginExecutionException("Your Dynamics365 App License has expired. To continue to use this App, please renew your license from Contoso Inc.");
                    }

                    //RetrieveAllEntitiesRequest request = new RetrieveAllEntitiesRequest()
                    //{
                    //    EntityFilters = EntityFilters.Entity,
                    //    RetrieveAsIfPublished = true
                    //};

                    //// Retrieve the MetaData.
                    //RetrieveAllEntitiesResponse response = (RetrieveAllEntitiesResponse)service.Execute(request);
                    //foreach (EntityMetadata currentEntity in response.EntityMetadata)
                    //{
                        
                    //}



                    }
                catch (FaultException<OrganizationServiceFault> ex)
                {
                    throw new InvalidPluginExecutionException("An error occurred in MyPlug-in.", ex);
                }
                catch (Exception ex)
                {
                    tracingService.Trace("MyPlugin: {0}", ex.ToString());
                    throw;
                }               
            }
        }
    }
}