// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author></author>
// <date>5/31/2018 5:37:33 PM</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using Microsoft.Xrm.Sdk.Query;
using System.Security;


namespace Microsoft.Dynamics365.BPF.Stage.Audit.PlugIn
{
    using System;
    using System.Collections.Generic;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Dynamics365.BPF.Stage.Audit.Logs;


    public class ExecuteBPFStagePlugin : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            // Extract the tracing service for use in debugging sandboxed plug-ins.
            // If you are not registering the plug-in in the sandbox, then you do
            // not have to add any tracing service related code.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                // Obtain the target entity from the input parameters.
                Entity entity = (Entity)context.InputParameters["Target"];
                // Verify that the target entity represents an entity type you are expecting. 
                // For example, an account. If not, the plug-in was not registered correctly.

                // Obtain the organization service reference which you will need for
                // web service calls.
                IOrganizationServiceFactory serviceFactory =
                    (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                ServiceProxy = serviceFactory.CreateOrganizationService(context.UserId);

                Logger.LogInstance.AssignTrace(tracingService);

                #region for debugging purpose , Loop through the entity get the values
                //foreach(var attrib in bpfstrategicisventity.Attributes)
                //{
                //    tracingService.Trace($"Name : " + attrib.Key + " - Value : " + attrib.Value);
                //}
                #endregion

                try
                {
                    //Logger.LogInstance.LogWarning(nameof(ExecuteBPFStagePlugin), "Entity.LogicalName", entity.LogicalName);
                    //Logger.LogInstance.LogWarning(nameof(ExecuteBPFStagePlugin), "context.MessageName", context.MessageName);


                    if (entity.LogicalName == "cxp_strategicisvmanagementflow")
                    {
                        if (context.ParentContext.MessageName == "Delete") return;

                        Entity bpfStrategicIsvEntity = (Entity)context.PostEntityImages["PostImage"];

                        if (context.MessageName == "Create")
                        {
                            CreateEntity(bpfStrategicIsvEntity);
                        }
                        else if (context.MessageName == "Update")
                        {
                            if (bpfStrategicIsvEntity.Attributes.Contains("completedon"))
                            {
                                UpdateCompletedOn(bpfStrategicIsvEntity);
                            }
                            else
                            {
                                CreateEntity(bpfStrategicIsvEntity);
                            }
                        }
                        //throw new InvalidPluginExecutionException("message");
                    }
                    else if (entity.LogicalName == "cxp_processhistory")
                    {

                        string PreviousStage = GetPreviousStage(entity["subject"].ToString());
                        if (!String.IsNullOrEmpty(PreviousStage))
                        {
                            Dictionary<string, string> attributenameandvalue = new Dictionary<string, string>();
                            attributenameandvalue.Add("regardingobjectid", ((EntityReference)entity["regardingobjectid"]).Id.ToString());
                            attributenameandvalue.Add("subject", PreviousStage);

                            ColumnSet resultcolumnSet = new ColumnSet("regardingobjectid", "subject", "actualend");

                            EntityCollection processhistoryresult = RetrieveEntityRecords
                                                                    ("cxp_processhistory",
                                                                    resultcolumnSet, attributenameandvalue);

                            DateTime Actualstarttime = Convert.ToDateTime(entity["actualstart"]);

                            UpdateEntity(processhistoryresult, Actualstarttime);
                        }
                        //throw new InvalidPluginExecutionException("message");
                    }

                }
                catch (FaultException<OrganizationServiceFault> ex)
                {
                    throw new InvalidPluginExecutionException("An error occurred in MyPlug-in.", ex);
                }
                catch (Exception ex)
                {
                    tracingService.Trace("MyPlugin: {0}", ex.ToString());
                    throw;
                }
            }
        }

        /// <summary>
        /// Create Process History record in DYnamics365 based on the values from Business Process Flow
        /// <param name="bpfstrategicisventity"></param>
        private void CreateEntity(Entity bpfstrategicisventity)
        {
            Entity processhistoryentity = new Entity("cxp_processhistory");
            Guid isvAppId = ((EntityReference)bpfstrategicisventity.Attributes["bpf_cxp_appid"]).Id;
            string currenStage = ((EntityReference)bpfstrategicisventity.Attributes["activestageid"]).Name;

            processhistoryentity["subject"] = currenStage;
            processhistoryentity["regardingobjectid"] = new EntityReference("cxp_app", isvAppId);
            processhistoryentity["actualstart"] = bpfstrategicisventity.Attributes["activestagestartedon"];
            ServiceProxy.Create(processhistoryentity);
        }

        private void UpdateCompletedOn(Entity bpfstrategicisventity)
        {
            string currentstagevalue = string.Empty;
            if (bpfstrategicisventity.Attributes.Contains("activestageid"))
            {
                currentstagevalue = ((EntityReference)bpfstrategicisventity.Attributes["activestageid"]).Name;
                //Logger.LogInstance.LogWarning(nameof(UpdateCompletedOn), "currentstagevalue", currentstagevalue);
            }

            if (currentstagevalue.Equals("promote", StringComparison.OrdinalIgnoreCase))
            {
                if (bpfstrategicisventity.Attributes.Contains("completedon"))
                {
                    DateTime comletedon = Convert.ToDateTime(bpfstrategicisventity.Attributes["completedon"]);
                    string applicationid = ((EntityReference)bpfstrategicisventity.Attributes["bpf_cxp_appid"]).Id.ToString();

                    Dictionary<string, string> attributenameandvalue = new Dictionary<string, string>();
                    attributenameandvalue.Add("regardingobjectid", applicationid);
                    attributenameandvalue.Add("subject", currentstagevalue);

                    ColumnSet resultcolumnSet = new ColumnSet("regardingobjectid", "subject", "actualend");

                    EntityCollection processhistoryresult = RetrieveEntityRecords
                                                            ("cxp_processhistory",
                                                            resultcolumnSet, attributenameandvalue);

                    UpdateEntity(processhistoryresult, comletedon);
                }
            }
        }

        private void UpdateEntity(EntityCollection entity, DateTime Actualdate)
        {
            //Logger.LogInstance.LogWarning(nameof(UpdateEntity), "Total count", entity.Entities.Count.ToString());

            if (entity != null && entity.Entities.Count > 0)
            {
                if (entity.Entities[0].Attributes.Contains("actualend"))
                {
                    entity.Entities[0].Attributes["actualend"] = Actualdate;
                }
                else
                {
                    entity.Entities[0].Attributes.Add("actualend", Actualdate);
                }

                ServiceProxy.Update(entity.Entities[0]);
            }
        }

        private string GetPreviousStage(string CurrentStage)
        {
            string previousstage = string.Empty;

            if (CurrentStage.Equals("envision", StringComparison.OrdinalIgnoreCase))
                previousstage = "recruit";
            else if (CurrentStage.Equals("build", StringComparison.OrdinalIgnoreCase))
                previousstage = "envision";
            else if (CurrentStage.Equals("promote", StringComparison.OrdinalIgnoreCase))
                previousstage = "build";

            return previousstage;
        }

        private FilterExpression FormConditionExpression(Dictionary<string, string> attributevalues)
        {
            return new FilterExpression
            {
                Conditions =
                {
                    new ConditionExpression("regardingobjectid", ConditionOperator.Equal, attributevalues["regardingobjectid"]),
                    new ConditionExpression("subject", ConditionOperator.Equal, attributevalues["subject"])
                }
            };
        }

        private EntityCollection RetrieveEntityRecords(string EntityName,
            ColumnSet Resultcolumns,
            Dictionary<string, string> attributeNameAndValue)
        {
            QueryExpression entityqueryexpression = new QueryExpression(EntityName);
            entityqueryexpression.ColumnSet = Resultcolumns;
            entityqueryexpression.Criteria = FormConditionExpression(attributeNameAndValue);
            EntityCollection entityresults = ServiceProxy.RetrieveMultiple(entityqueryexpression);
            return entityresults;
        }

        public IOrganizationService ServiceProxy { get; set; }
    }
}